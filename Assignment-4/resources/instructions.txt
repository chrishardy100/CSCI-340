PROJECT 2


Project Deliverables
--------------------
Your project deliverables are to be posted to CUNY Blackboard using the Project 2 link.
1) Only one source code file as follows with filename format showing your last name and student id: MYLASTNAME_MYSTUDENTID.c  
 a) At top of the file: your full name and student id in comments, for example:  // MYFIRSTNAME MYLASTNAME MYSTUDENTID
 b) In-line code comments no fewer than every 5 lines of code which describe your algorithmic steps in plain English language.
    That is, I do not want to see literal syntax transcriptions of the code.  
2) An MS Word or PDF document with a write-up of your software design and an explanation of the issues encountered and resolved. (1 page)
   The write-up is essay style with no bullet points nor itemized lists nor source code nor pseudo-code listings.
   Filename format is MYLASTNAME_MYSTUDENTID.doc (or pdf).  You are to use Times New Roman Font with font size = 11 and 1.5 line spacing.
3) Text file of program output (text files only, that is, NO graphics files from copying screen output) according to output format in  
   Project Instructions further below for your program execution. 
   Filename format is MYLASTNAME_MYSTUDENTID.out
4) Please please ensure that your program will compile and link using the GNU C compiler. I will compile and link your source code to
   generate an executable file using the following command:
	gcc MYLASTNAME_MYSTUDENTID.c  -o MYLASTNAME_MYSTUDENTID.exe -pthread
     or
	gcc MYLASTNAME_MYSTUDENTID.c  -o MYLASTNAME_MYSTUDENTID.exe -lpthread
Project Specification
---------------------
1) This second project is a variation and extension of the pthread summation example discussed extensively in the Chapter 4 lectures. 
   In your second project you will design and implement a POSIX pthreads multithreaded program that, when executed, has a main program
   thread, 10 worker child pthreads, and each of the 10 worker child pthreads has its own 3 worker computation child (that is, grandchild of 
   the main) pthreads.    
   Overall, you have 1 main program thread, 10 worker child pthreads, and 30 worker computation pthreads.
2) The input file has 10,000 numbers. Your main program thread will open and read the input file into a 10,000 element integer array 
   called InpArray. Each of the 10 worker child pthreads will be responsible for processing its own 1,000 number segment of this integer
   array as we saw in the lectures for data parallelism.
3) However, what is different in this project from the lectures is that each of the 10 worker child pthreads will make available the arithmetic 
   average, sum, and the product over the sum (product/sum) for its 1,000 number segment (of the InpArray) to the main program thread. 
   Please note that the worker child pthreads do not actually do the computations themselves. Instead, the 3 worker computation child 
   pthreads (grandchildren) will do the computations while the worker child pthread (the parent) just simply waits for the computations to be   
   completed.
   That is, the first worker computation child pthread determines the arithmetic average, the second worker computation child 
   pthread determines the sum, and the third worker computation child pthread does the product/sum computation.
   When each worker child pthread has received its 3 results from the worker computation child pthreads, the worker child pthread (parent)
   will make these results available to the main program thread using global array(s) and then terminate.
   After all of 10 worker pthreads have terminated, the main program thread will compute and provide output for:
   a) The minimum of the 10 arithmetic average numbers
   b) The minimum of the 10 sum numbers
   c) The minimum of the 10 product over the sum numbers
Your program execution and command line arguments follows this syntax to provide requested output file for the one input file given on
the command line:
./MYLASTNAME_MYSTUDENTID.exe INPUT_FILE OUTPUT_FILE

Project Instructions
--------------------
1) Your program source code must be provided in the C programming language.
2) You must use the creat(), write(), and close() system calls for output and you MUST use the POSIX pthread multithreaded library. 
   You ARE otherwise permitted to use C standard I/O library functions and string and math library functions. Please check whether the
   functions you want to use are thread-safe (eg., remember the lecture about read () vs pread()). 

3) Program output as follows in which you substitute computation results for these capitalized symbols:
   THREAD_NUMBER -      thread number 0..9
   ARITHMETIC_AVERAGE - arithmetic average (that is, sum divided by the count) 
   SUM   -              sum of the numbers
   PRODUCT_OVER_SUM -   (product of the numbers) / (sum of the numbers)
   MIN_OF_ARITH_AVG -   minimum of all the arithmetic averages
   MIN_OF_SUM   -       minimum of all the sums
   MIN_OF_PRODUCT_SUM - minimum of all the products over the sums
   
   1) For each and every worker child pthread, the main program thread will write one line to the output file of computation results:
   Worker Child Pthread Number = THREAD_NUMBER : \t  Arith Avg = ARITHMETIC_AVERAGE \t Sum = SUM \t PoverS = PRODUCT_OVER_SUM \n
   2) The main program thread will also write the following 4 lines of output:
   Main program thread: Min of the Arithmetic Averages = MIN_OF_ARITH_AVG \n
   Main program thread: Min of the Sums = MIN_OF_SUM \n
   Main program thread: Min of the Products over Sums = MIN_OF_PRODUCT_SUM \n
   Main program thread: Terminating. \n



